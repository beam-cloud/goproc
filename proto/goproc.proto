syntax = "proto3";

option go_package = "github.com/beam-cloud/goproc/proto";

package goproc;

service GoProc {
  rpc Exec(ExecProcessRequest) returns (ExecProcessResponse) {}
  rpc Wait(WaitProcessRequest) returns (WaitProcessResponse) {}
  rpc Kill(KillProcessRequest) returns (KillProcessResponse) {}
  rpc Signal(SignalProcessRequest) returns (SignalProcessResponse) {}
  rpc Status(StatusProcessRequest) returns (StatusProcessResponse) {}
  rpc Stdout(StdoutProcessRequest) returns (StdoutProcessResponse) {}
  rpc Stderr(StderrProcessRequest) returns (StderrProcessResponse) {}
  rpc ListProcesses(ListProcessesRequest) returns (ListProcessesResponse) {}
}

message ExecProcessRequest {
  repeated string args = 1;
  string cwd = 2;
  repeated string env = 3;
  optional bool wait = 4;
}

message ExecProcessResponse {
  bool ok = 1;
  int32 pid = 2;
  string error_msg = 3;
  optional int32 exit_code = 4;
}

message WaitProcessRequest { int32 pid = 1; }

message WaitProcessResponse {
  bool ok = 1;
  int32 exit_code = 2;
  string error_msg = 3;
}

message KillProcessRequest { int32 pid = 1; }

message KillProcessResponse {
  bool ok = 1;
  string error_msg = 2;
}

message SignalProcessRequest {
  int32 pid = 1;
  int32 signal = 2;
}

message SignalProcessResponse {
  bool ok = 1;
  string error_msg = 2;
}

message StatusProcessRequest { int32 pid = 1; }

message StatusProcessResponse {
  bool ok = 1;
  ProcessInfo process = 2;
  string error_msg = 3;
}

message StdoutProcessRequest { int32 pid = 1; }

message StdoutProcessResponse {
  bool ok = 1;
  string error_msg = 2;
  string stdout = 3;
}

message StderrProcessRequest { int32 pid = 1; }

message StderrProcessResponse {
  bool ok = 1;
  string error_msg = 2;
  string stderr = 3;
}

message ListProcessesRequest {}

message ProcessInfo {
  int32 pid = 1;
  string cmd = 2;
  string cwd = 3;
  repeated string env = 4;
  bool running = 5;
  int32 exit_code = 6;
}

message ListProcessesResponse {
  bool ok = 1;
  repeated ProcessInfo processes = 2;
  string error_msg = 3;
}